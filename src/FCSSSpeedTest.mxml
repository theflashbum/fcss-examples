<?xml version="1.0" encoding="utf-8"?>
<local:BaseOutputApp xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/halo" xmlns:fcss = "com.flashartofwar.fcss.*" xmlns:local="*" width="500" height="600" applicationComplete="startExample()">
	<fx:Script>
		<![CDATA[
			import com.flashartofwar.fcss.styles.Style;
			import com.flashartofwar.fcss.stylesheets.FStyleSheet;
			private var rawCSS : String;
			private var urlLoader : URLLoader;
			private var styleSheet:FStyleSheet;
			private static const BREAK:String = "----------------------------------------------------------------------------------------------------------";


			protected function startExample():void
			{
				mainPanel.title = "F*CSS Speed Test";
				descriptionField.text= "This test loads in CSS, creates a new StyleSheet, parses the text then runs through each of the selectors adding up " +
					"how long it takes to request each one. After the first test is run an additional test is done re-requesting each selector to see how well " +
					"the cache system performs.";
				panelA.height = 100;
				loadCSS();
			}

			public function loadCSS():void
			{
				urlLoader = new URLLoader( );
				urlLoader.addEventListener( Event.COMPLETE, onCSSLoad);
				urlLoader.load(new URLRequest("css/large_demo.styles.css"));
			}

			protected function parseCamoCSS():void
			{
				styleSheet = new FStyleSheet();	
				outputField.appendText(BREAK+"\n* Test FCSS Pre-parser *\n"+BREAK+"\n");
				// parse css	
				var t:Number = getTimer();


				styleSheet.parseCSS(rawCSS, true);
				t = (getTimer()-t);
				var strDebug:String;
				strDebug = "- Parsing time: " + t + " ms\n";
				strDebug += "- Bytes: " + rawCSS.length + " (" + Math.round(rawCSS.length / t) + " bytes/ms)\n\n";
				outputField.appendText(strDebug);
			}

			private function onCSSLoad(event : Event) : void
			{
				rawCSS = URLLoader(event.target ).data;
				parseCamoCSS();
				requestAllstyles();
				requestAllstyles();

			}

			protected function requestAllstyles():void
			{
				outputField.appendText(BREAK+"\n* Test Requesting Every style *\n"+BREAK+"\n");

				var t:Number = getTimer();
				var strDebug:String;

				var styles:Array = styleSheet.styleNames;
				var total:int = styles.length;
				var i:int;
				var style:Style;
				var styleRequestTime:Number;
				var styleName:String;
				var requestTimes:Number = 0;
				var longestRequest:Number = 0;
				var highestRequest:Number = 0;
				var results:Array = [];

				for(i = 0; i < total; i++)
				{
					styleName = styles[i];
					styleRequestTime = getTimer();
					style = styleSheet.getStyle(styleName);
					styleRequestTime = (getTimer()-styleRequestTime);
					if(styleRequestTime > 0)
						results.push({time:styleRequestTime, name:styleName});

					requestTimes += styleRequestTime;

				}
				t = (getTimer()-t);
				strDebug = "Total time to request "+(total-1)+" styles time: " + t + " ms"+"\n";
				outputField.appendText(strDebug);

				outputField.appendText(""+(styles.length - results.length)+"/"+styles.length+" styles took 0 ms"+"\n");

				var average:Number = results.length/styles.length;

				outputField.appendText("Average Style Request Time "+ average+ " ms"+"\n");
				results.sortOn("time", Array.NUMERIC | Array.DESCENDING); 

				var average2:Number = ((requestTimes/total-1) < 0) ? 0 : (requestTimes/total-1);

				outputField.appendText("- Shortest Request "+results[results.length - 1].time+" ms '"+ results[results.length - 1].name+"' (* 0 ms doesn't count.)"+"\n");
				outputField.appendText("- Longest Request "+results[0].time+" "+ results[0].name+"\n");

				var oneSecondRequests:Number = 0; 
				var longerStyles:String ="";
				for(i = 0; i < results.length; i++)
				{
					if(results[i].time > 1)
						longerStyles += "    Style '"+results[i].name+"' - "+results[i].time+" ms\n"+"\n";
					else
						oneSecondRequests ++;
				}

				outputField.appendText(""+oneSecondRequests+" styles took 1 ms"+"\n");

				outputField.appendText("Style requests > 1 ms:"+"\n");
				outputField.appendText(longerStyles);
			}
		]]>
	</fx:Script>
</local:BaseOutputApp>
